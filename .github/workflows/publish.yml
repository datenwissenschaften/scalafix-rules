name: Publish to Nexus Repository

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION=$(grep -oP 'version := "\K[^\"]+' scalafix/build.sbt)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update README.md with Latest Version
        run: |
          # Match the line containing "scalafixDependencies" and replace the version part with the latest version
          sed -i "s|\(ThisBuild / scalafixDependencies += \"com.datenwissenschaften\" %% \"scalafix-rules\" % \)\"[^\"]*\"|\1\"$PACKAGE_VERSION\"|" README.md
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

      - name: Commit and Push README.md Update
        if: steps.check_package_version.outcome != 'failure'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README.md with latest version $PACKAGE_VERSION"
          git push

      - name: Check if package and version already exist on Nexus
        id: check_package_version
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          BASE_URL="https://nexus.datenwissenschaften.com/repository/maven-releases"
          RESPONSE=$(curl -u $NEXUS_USER:$NEXUS_PASSWORD -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/com/datenwissenschaften/scalafix-rules_2.13/$PACKAGE_VERSION/")
          
          if [ "$RESPONSE" == "200" ]; then
            echo "Version $PACKAGE_VERSION already exists. Exiting."
            exit 1
          else
            echo "Version $PACKAGE_VERSION is not published yet. Continuing..."
          fi

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: sbt

      - name: Cache SBT dependencies
        uses: actions/cache@v3
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-ivy2-

      - name: Cache SBT artifacts
        uses: actions/cache@v3
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Publish to Nexus
        if: steps.check_package_version.outcome != 'failure'
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          cd scalafix
          echo "realm=Sonatype Nexus Repository Manager" > ~/.sbt/1.0/credentials.sbt
          echo "host=nexus.datenwissenschaften.com" >> ~/.sbt/1.0/credentials.sbt
          echo "user=$NEXUS_USER" >> ~/.sbt/1.0/credentials.sbt
          echo "password=$NEXUS_PASSWORD" >> ~/.sbt/1.0/credentials.sbt
          sbt clean publish
